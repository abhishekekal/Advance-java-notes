Last Lecture Agenda
1 Types of Application
	Stand alone Application
		1 GUI Based Application/Desktop
			e.g Calculator
		2 CUI Based Application-(Character User Interface Based)
		 e.g All core java Application which are running from Command prompt is a CUI Based
		Also Called Console Application

		Web Application
		e.g www.google.com
		java enterprise application- Bank Application,Telecom Application
		means it support atm,smart device, It is combination of all things(Multiple services) like Bank Application
2 Server
	1 H/w Server- physical Machine(It has one or more S/W server run with differentiate using port)
2 S/W Server
    - Web Server- IIS (Microsoft),Glassfish (sun Microsystem),Tomcat server(Apache), Jetty
			
    - Application Server- mysql, Angular server,Oracle server weblogic,Jboss (Red Hat),IBM WebSphere
	- one port has one application only 

3 HTTP protocol
	- protocol => It is set of rule 
	HTTP is stateless protocol-
   HTTP is a stateless protocol, which means that the connection between the browser and the server is lost once the transaction ends.
	
4 Http Request & HTTP Response
	- HTTP follows Request-Response model.
	- HTTP Request = Req headers + Req body
	Headers:
			Req Method = GET/POST/PUT/DELETE/HEAD/TRACE/OPTIONS
			Uri = resource identifier
			HTTP version =  1.1
			Browser language = en
			Client/Browser = IP address
			Content Type = type of data
				text
					text/plain, text/xml, "text/html"
				image
					image/jpeg, image/png, ...
				audio
					audio/mp3, audio/wav, ...
				video
					video/mpeg, ...
				application
					application/json, application/pdf, ...
					
			Content Length = num of bytes in body
			Cookies
			User-Agent = Browser details
			Auth Token
	Body:
			data 
				e.g. form data -- in key=value pair.
				e.g. JSON data
- HTTP Response = Resp headers + Resp body	
		Headers:
			HTTP version=1.0/1.1
			Content-Type= type of data in resp body.
			Content-Length= num of bytes in resp body.
			Status code & message
			
				HTTP Status code:
					1 2xx=> 200-299 --> success e.g. 200 (success/OK)
					2 3xx 300-399 --> redirection e.g. 302 (http redirection)resource move to other
					3 4xx  400-499 --> client side errors e.g. 403 (forbidden), 404 (not found), 400 (Bad Request) ...	
					4 5xx 500-599 --> server errors Whenever there is problem on server side this series is used			
			
			
			Server info= IP address
			Cookies
		Body:
			data
				e.g. HTML tags
				e.g. JSON data

		
5 Http Methods
	1 get method => it fetch a data from backend server 
	2 post => it sends a data from front end server to backend server 
	3 put => It is used to update a particular record 
	4 delete => It is used to delete a particular record 

6 Server-client establishment/ Flow 



summary & Interview Questions
1 Explain Types of Application
2 What is server
3 Explain HTTP Request & HTTP Response
4 Explain HTTP Methods
5 How server-client Application work?

Today's Lecture Agenda
1 What is Servlet?
	- It is server side technology 
	- It is used to handle client(browser) side request to process the request and generate dynamic response
	
2 Servlet Life Cycle?
	1 init => only once it is invoked 
	2 service => doget => It invokes many more time 
	3 destroy => it invoked only once 
 1 . init() method: The Servlet.init() method is called by the Servlet container to indicate that this Servlet instance is instantiated successfully and is about to put into service.
//init() method

public class MyServlet implements Servlet{
   public void init(ServletConfig config) throws ServletException {
        //initialization code
   }
    //rest of code
}
service() method: The service() method of the Servlet is invoked to inform the Servlet about the client requests.
This method uses ServletRequest object to collect the data requested by the client.
This method uses ServletResponse object to generate the output content.
// service() method

public class MyServlet implements Servlet{
    public void service(ServletRequest res, ServletResponse res)
    throws ServletException, IOException {
            // request handling code
    }
    // rest of code
}
destroy() method: The destroy() method runs only once during the lifetime of a Servlet and signals the end of the Servlet instance.
//destroy() method

public void destroy()
As soon as the destroy() method is activated, the Servlet container releases the Servlet instance.



	
3 How to get Data from parameter?

. Using GET requests with query strings:

In this method, the data is appended to the URL of the request as a query string. The format is typically like this:

http://yourserver.com/your_servlet?param1=value1&param2=value2
Within your servlet, you can access the parameter values using the getParameter() method of the HttpServletRequest object

public class MyServlet extends HttpServlet {

  @Override
  protected void doGet(HttpServletRequest request, HttpServletResponse response)
      throws ServletException, IOException {
    String param1Value = request.getParameter("param1");
    String param2Value = request.getParameter("param2");
    
    // Process the parameter values here
    
    // ...
  }
}

4 How to create servlet project?
Step 1: Create a Dynamic web project
Step 2: servlet-api.jar file 
Step 3: Create Servlet Class
Step 4: Implement the Logic




summary & Interview Questions
1 What is Servlet?
2 Explain Servlet Life Cycle?
3 How to get Data from parameter?
4 How to create servlet project?

com.tka.servlet.DemoServlet

