core Spring annotations

1. @Component:- it makes a java classs as a spring component
            The @Components is used to mark the Java class in the Spring applications.
          The Spring IoC container manages the component annotations and is responsible for the lifecycle of the components, such as initializing, creating, or destroying them.
        As a result, components can represent any object in the application, including services and controllers. 
        Also, when the Java class marked the @Component annotation, Spring Boot detected the components with the help of the classpath.

ex 

@Component
public class Emp {

   public void fun()
  {
   sop("hello");
   }

}


main file --

 @Autowired
 private Emp e1;

@Override
public void run(String... args) throws Exception {
			
this.st.studying();
this.e1.fun();
}



2 @controller:-  marks a java class as a Spring mvc Controller 
		it use for the request controller  into the mvc 



@Controller 
public class MyController { 
@RequestMapping("/hello") 
public String hello() { 
return "hello"; 
} 
} 


3.@Service :- Marks a java class as service layer component
		 containing business logic for the application

@Service 
public class MyService { 
public void performService() { 
System.out.println("Service performed"); 
} 
} 

one is the entity class
this class create it the repository  of this class
and create the one class gives the @service annotation  and use that with the creating the object of the repository  object 


		
4 @Repository:- it marks a java class as a data access object 	
		its provided  role and purposes
		it can use into the exception  handling like the sqlException
The @Repository annotation is used to interact with different databases, such as NoSQL databases and relational databases.
Also, when a Java class is marked with @Repository annotation, Spring Boot automatically creates and adds the required context.
The class annotated with Repository is an element of the data access layer and provides an API for interacting, which allows the developer to write less code. 
The @Repository annotation is a marker for the class that performs the role of data access object.
Using @Repository, you can develop flexible, reusable, and modular repositories that the Spring Data framework can easily handle.
		
@Repository 
public class MyRepository { 
public void saveData() { 
System.out.println("Data saved"); 
} 
} 


5. @Configuration :- 

	it can indicate that a class declared  one or more @bean methods
	The purpose of a configuration class is to indicate the application context, 
	like service and other application components.
	As a result, developers can create highly flexible and efficient applications that can adapt to requirement changes quickly. 
	@Configuration annotation supports importing other classes. The Spring Boot custom annotation can separate configuration classes based on domain or functionality.


@Configuration 
public class AppConfig { 
@Bean 
public MyBean myBean() { 
return new MyBean(); 
} 
} 

6. @bean :- indicates that a method produces a bean to be managed by the Spring container

	The @Bean is a method-level annotation widely used in Spring Boot applications. 
	Bean annotation is a direct analog of the XML element, which indicates that the Spring container should register a method.
	Spring bean annotations are the objects that can be injected into other components or other beans. 
	Also, it can be an alternative to the XML tag. @Bean annotations are singletons, meaning they can be created or shared with the entire application context.

@Configuration 
public class AppConfig { 
@Bean 
public MyBean myBean() { 
return new MyBean(); 
} 
} 

7. @Autowired :-  used for automatic dependency injection

In SpringBoot annotation, @Autowired is used to inject the dependency of one bean into another.
The spring-managed object is implemented into another object that a class needs to perform.

Thus, when you annotate a field, a method with @Autowired, Spring Boot will inject the dependency automatically and find the bean that matches that field or parameter.
The @Autowired is used to inject in three ways: field, setter, and constructor injection.

@Component 
public class MyComponent { 
@Autowired 
private MyService myService; 
public void useService() { 
myService.performService(); 
} 
} 


8.@qualifier:-  Specifies which bean should be injected when multiple 
candidates are present.
	 annotation to clearly indicate the bean name and tell spring which dependency should be called for when more than one bean satisfies the conditions for the dependency.


@Component 
public class MyComponent { 
@Autowired 
@Qualifier("specificService") 
private MyService myService; 
public void useService() { 
myService.performService(); 
} 
} 

9. @value :- injecting  the external value  into application field method parameter 
		application.properties  file 

		app.example.integer-value=9876
               app.example.decimal-value=1.75
              app.example.boolean-value=true
		



into the spring application


@Value("${app.example.integer-value}")
private Integer valueInteger;

@Value("${app.example.decimal-value}")
private Double valueDouble;

@Value("${app.example.boolean-value}")
private Boolean valueBoolean;




