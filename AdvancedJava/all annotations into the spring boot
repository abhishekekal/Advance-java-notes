core Spring annotations

1. @Component:- it makes a java classs as a spring component
            The @Components is used to mark the Java class in the Spring applications.
          The Spring IoC container manages the component annotations and is responsible for the lifecycle of the components, such as initializing, creating, or destroying them.
        As a result, components can represent any object in the application, including services and controllers. 
        Also, when the Java class marked the @Component annotation, Spring Boot detected the components with the help of the classpath.

ex 

@Component
public class Emp {

   public void fun()
  {
   sop("hello");
   }

}


main file --

 @Autowired
 private Emp e1;

@Override
public void run(String... args) throws Exception {
			
this.st.studying();
this.e1.fun();
}



2 @controller:-  marks a java class as a Spring mvc Controller 
		it use for the request controller  into the mvc 



@Controller 
public class MyController { 
@RequestMapping("/hello") 
public String hello() { 
return "hello"; 
} 
} 


3.@Service :- Marks a java class as service layer component
		 containing business logic for the application

@Service 
public class MyService { 
public void performService() { 
System.out.println("Service performed"); 
} 
} 

one is the entity class
this class create it the repository  of this class
and create the one class gives the @service annotation  and use that with the creating the object of the repository  object 


		
		




