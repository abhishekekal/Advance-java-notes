core Spring annotations

1. @Component:- it makes a java classs as a spring component
            The @Components is used to mark the Java class in the Spring applications.
          The Spring IoC container manages the component annotations and is responsible for the lifecycle of the components, such as initializing, creating, or destroying them.
        As a result, components can represent any object in the application, including services and controllers. 
        Also, when the Java class marked the @Component annotation, Spring Boot detected the components with the help of the classpath.

ex 

@Component
public class Emp {

   public void fun()
  {
   sop("hello");
   }

}


main file --

 @Autowired
 private Emp e1;

@Override
public void run(String... args) throws Exception {
			
this.st.studying();
this.e1.fun();
}



2 @controller:-  marks a java class as a Spring mvc Controller 
		it use for the request controller  into the mvc 



@Controller 
public class MyController { 
@RequestMapping("/hello") 
public String hello() { 
return "hello"; 
} 
} 


3.@Service :- Marks a java class as service layer component
		 containing business logic for the application

@Service 
public class MyService { 
public void performService() { 
System.out.println("Service performed"); 
} 
} 

one is the entity class
this class create it the repository  of this class
and create the one class gives the @service annotation  and use that with the creating the object of the repository  object 


		
4 @Repository:- it marks a java class as a data access object 	
		its provided  role and purposes
		it can use into the exception  handling like the sqlException
The @Repository annotation is used to interact with different databases, such as NoSQL databases and relational databases.
Also, when a Java class is marked with @Repository annotation, Spring Boot automatically creates and adds the required context.
The class annotated with Repository is an element of the data access layer and provides an API for interacting, which allows the developer to write less code. 
The @Repository annotation is a marker for the class that performs the role of data access object.
Using @Repository, you can develop flexible, reusable, and modular repositories that the Spring Data framework can easily handle.
		
@Repository 
public class MyRepository { 
public void saveData() { 
System.out.println("Data saved"); 
} 
} 


5. @Configuration :- 

	it can indicate that a class declared  one or more @bean methods
	The purpose of a configuration class is to indicate the application context, 
	like service and other application components.
	As a result, developers can create highly flexible and efficient applications that can adapt to requirement changes quickly. 
	@Configuration annotation supports importing other classes. The Spring Boot custom annotation can separate configuration classes based on domain or functionality.


@Configuration 
public class AppConfig { 
@Bean 
public MyBean myBean() { 
return new MyBean(); 
} 
} 

6. @bean :- indicates that a method produces a bean to be managed by the Spring container

	The @Bean is a method-level annotation widely used in Spring Boot applications. 
	Bean annotation is a direct analog of the XML element, which indicates that the Spring container should register a method.
	Spring bean annotations are the objects that can be injected into other components or other beans. 
	Also, it can be an alternative to the XML tag. @Bean annotations are singletons, meaning they can be created or shared with the entire application context.

@Configuration 
public class AppConfig { 
@Bean 
public MyBean myBean() { 
return new MyBean(); 
} 
} 

7. @Autowired :-  used for automatic dependency injection

In SpringBoot annotation, @Autowired is used to inject the dependency of one bean into another.
The spring-managed object is implemented into another object that a class needs to perform.

Thus, when you annotate a field, a method with @Autowired, Spring Boot will inject the dependency automatically and find the bean that matches that field or parameter.
The @Autowired is used to inject in three ways: field, setter, and constructor injection.

@Component 
public class MyComponent { 
@Autowired 
private MyService myService; 
public void useService() { 
myService.performService(); 
} 
} 


8.@qualifier:-  Specifies which bean should be injected when multiple 
candidates are present.
	 annotation to clearly indicate the bean name and tell spring which dependency should be called for when more than one bean satisfies the conditions for the dependency.


@Component 
public class MyComponent { 
@Autowired 
@Qualifier("specificService") 
private MyService myService; 
public void useService() { 
myService.performService(); 
} 
} 

9. @value :- injecting  the external value  into application field method parameter 
		application.properties  file 

		app.example.integer-value=9876
               app.example.decimal-value=1.75
              app.example.boolean-value=true
		



into the spring application


@Value("${app.example.integer-value}")
private Integer valueInteger;

@Value("${app.example.decimal-value}")
private Double valueDouble;

@Value("${app.example.boolean-value}")
private Boolean valueBoolean;


10. @Scope :- 

	configures the scope of bean ( singleton , prototype )
	singleton :- This is the default scope. Only one instance of the bean is created and shared across the entire application context.
	Prototype: A new instance of the bean is created every time it is requested.
	Request: A new instance is created for each HTTP request. This scope is applicable only in web applications.
	Session: A new instance is created for each HTTP session. Like request scope, this is also applicable only in web applications.

11. @Lazy :- 

	Marks a bean to be lazily initilized 
	bean will not be created until it is first requested, rather than being instantiated at application startup.
	
12.
 @Primary: Indicates that a bean should be given preference when 
multiple candidates are qualified. 

13. @RequestMapping :- applied it both method and class also 
		use class level :- it defines a base url for all method in the class
		use it method level :- it specifies the exact url that the method shoud handle
		that can contenses the all http method like get, post, put,delete 
14. @getMapping ,PostMapping, putMapping,DeleteMapping,PatchMapping

15. @RequestParam :- binds a web request  parameter  to a amthod parameter
			public class MyRestController { 
@GetMapping("/resource") 
public String getResource(@RequestParam String id) { 
return "Resource ID: " + id; 
} 
} 

16.  @PathVariable
The @PathVariable is used to measure dynamic parameters from the request URI and map them to method parameters in a controller. 
The annotation helps develop RESTful web services, allowing you to manage variable parameters.

@RestController 
public class MyRestController { 
@GetMapping("/resource/{id}") 
public String getResource(@PathVariable String id) { 
return "Resource ID: " + id; 
} 
} 

17. @RequestBody: Binds the body of the web request to a method 
parameter. 
This is particularly useful for handling JSON or XML data sent from a client, allowing for seamless deserialization into Java objects

public class Employee {
    private String name;
    private int age;

    // Getters and Setters
    public String getName() { return name; }
    public void setName(String name) { this.name = name; }
    public int getAge() { return age; }
    public void setAge(int age) { this.age = age; }
}


import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/employees")
public class EmployeeController {

    @PostMapping
    public ResponseEntity<Employee> createEmployee(@RequestBody Employee employee) {
        // Logic to save the employee
        return ResponseEntity.status(201).body(employee); // Returning the created employee
    }
}


18. @ResponseBody: Indicates that the return value of a method should be 
used as the response body. 

When a method in a controller is annotated with @ResponseBody, Spring automatically serializes the returned object into the specified format (typically JSON) and writes it to the HTTP response.

if the controller class is annoted as the @RestController that time the all method is the reated as the @ResponseBody


@RestController
@RequestMapping("/api/students")
public class StudentController {

    @GetMapping("/{id}")
    public ResponseEntity<Student> getStudent(@PathVariable Long id) {
        Student student = new Student("John", "Doe", 20); // Sample student data
        return ResponseEntity.ok(student); // Automatically serialized to JSON
    }
}


19.  @RequestHeader: Binds a method parameter to a request header. 
20 @CookieValue: Binds a method parameter to a cookie value. 
21 @SessionAttribute: Binds a method parameter to a session attribute. 
22 @ModelAttribute: Binds a method parameter or return value to a named 
model attribute and exposes it to a web view. 
23 @InitBinder: Identifies methods which initialize the WebDataBinder, 
which are used for customizing request parameter binding. 
24 @ExceptionHandler: Defines the method that handles exceptions 
thrown by request-handling methods. 

25. @SpringBootApplication: Combines @Configuration, 
@EnableAutoConfiguration, and @ComponentScan with their default 
attributes. 
The @SpringBootApplication annotation is a prominent class of multiple annotations that combines three other Spring Boot annotations, such as @ComponentScan, @Configuration, and @EnableAutoConfiguration. 
It is placed in the root package and a meta-annotation of the application.
Using the @SpringBootApplication annotation, developers can configure the application and take benefit of the various features provided by the Spring Boot framework.
Also, by integrating multiple annotationsâ€™ functionality, you can reduce the boilerplate code required to configure applications.

@SpringBootApplication
public class DemoApplication implements CommandLineRunner {

	
	 @Autowired
	 private Student st;
	
		
		public static void main(String[] args) {
		SpringApplication.run(DemoApplication.class, args);
		System.out.println("hello");
		     
		}	
		
		@Override
		public void run(String... args) throws Exception {
			// TODO Auto-g
			this.st.studying();
		}

}


 26 @EnableAutoConfiguration: Enables Spring Bootâ€™s auto-configuration 
mechanism. 

27. @ComponentScan: Configures component scanning directives for use 
with @Configuration classes. 

@RestController: Combines @Controller and @ResponseBody, 
simplifying the creation of RESTful web services.




### `@Controller`
- **Usage**: Typically used in web applications where views are rendered using a templating engine like Thymeleaf, JSP, or FreeMarker.
- **Return Type**: The methods in a `@Controller` typically return a `String` representing the name of a view, or a `ModelAndView` object.
- **View Resolution**: The view name returned by the controller is resolved by a `ViewResolver` (like Thymeleaf or JSP) to render HTML content.
- **Annotations**: 
  - You often pair `@Controller` methods with `@ResponseBody` to send data (e.g., JSON) directly in HTTP responses.
  - If you want to return JSON or XML from a `@Controller`, you'd use `@ResponseBody` on each method or on the class itself.



package com.example.demo.controller;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;

import java.util.Arrays;
import java.util.List;

@Controller
public class ProductController {

    @GetMapping("/products")
    public String getProducts(Model model) {
        // Simulating a list of products
        List<String> products = Arrays.asList("Laptop", "Smartphone", "Tablet");

        // Adding the list of products to the model
        model.addAttribute("products", products);

        // Returning the view name to be resolved (e.g., products.html)
        return "products";
    }
}



### `@RestController`
- **Usage**: Used in RESTful web services where the controller methods return data directly as JSON or XML rather than rendering a view.
- **Return Type**: The methods in a `@RestController` return objects, and these objects are serialized to JSON or XML and written directly into the HTTP response body.
- **Automatic `@ResponseBody`**: `@RestController` is a convenience annotation that combines `@Controller` and `@ResponseBody`. Every method in a `@RestController` returns data directly, without the need for explicitly annotating each method with `@ResponseBody`.
- **Annotations**: No need to use `@ResponseBody` since it's implied for every method.

package com.example.demo.controller;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.Arrays;
import java.util.List;

@RestController
public class ProductRestController {

    @GetMapping("/api/products")
    public List<String> getProducts() {
        // Simulating a list of products
        return Arrays.asList("Laptop", "Smartphone", "Tablet");
    }
}



8. @RequestScope: A specialized version of @Scope for a single HTTP 
request lifecycle. 
9. @SessionScope: A specialized version of @Scope for a HTTP session 
lifecycle. 
10. @ApplicationScope: A specialized version of @Scope for a web 
application lifecycle. 
Transaction Management Annotations 
1. @Transactional: Indicates that a method or class should be executed 
within a transactional context. 
2. @EnableTransactionManagement: Enables Springâ€™s annotation-driven 
transaction management capability. 
Aspect-Oriented Programming (AOP) Annotations 
1. @Aspect: Marks a class as an aspect. 
2. @Before: Declares a before advice. 
3. @After: Declares an after advice. 
4. @AfterReturning: Declares a returning advice. 
5. @AfterThrowing: Declares a throwing advice. 
6. @Around: Declares an around advice. 
7. @Pointcut: Declares a reusable pointcut expression. 
Scheduling Annotations 
1. @EnableScheduling: Enables Springâ€™s scheduled task execution 
capability. 
2. @Scheduled: Used for configuring scheduled tasks. 
3. @Async: Marks a method or type as asynchronous. 
4. @EnableAsync: Enables Springâ€™s asynchronous method execution 
capability. 
Caching Annotations 
1. @EnableCaching: Enables Springâ€™s annotation-driven cache 
management capability. 
2. @Cacheable: Indicates that the result of invoking a method (or all 
methods in a class) can be cached. 
3. @CachePut: Updates the cache with the result of a method. 
4. @CacheEvict: Indicates that a cache entry should be removed. 
5. @Caching: Allows multiple cache annotations to be used on a single 
method. 
Spring Security Annotations 
1. @EnableWebSecurity: Enables Spring Securityâ€™s web security support. 
2. @Secured: Specifies a list of security configuration attributes for method 
authorization. 
3. @PreAuthorize: Allows method calls based on the evaluation of an 
expression. 
4. @PostAuthorize: Allows method calls based on the evaluation of an 
expression after the method has been invoked. 
5. @RolesAllowed: Specifies a list of roles allowed to access a method. 





